/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TeamsIndexImport } from './routes/teams/index'
import { Route as RankingsIndexImport } from './routes/rankings/index'
import { Route as PlayersIndexImport } from './routes/players/index'
import { Route as KeyIndexImport } from './routes/key/index'
import { Route as ErrorIndexImport } from './routes/error/index'
import { Route as TeamsTeamIdImport } from './routes/teams/$teamId'
import { Route as PlayersPlayerIdImport } from './routes/players/$playerId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamsIndexRoute = TeamsIndexImport.update({
  id: '/teams/',
  path: '/teams/',
  getParentRoute: () => rootRoute,
} as any)

const RankingsIndexRoute = RankingsIndexImport.update({
  id: '/rankings/',
  path: '/rankings/',
  getParentRoute: () => rootRoute,
} as any)

const PlayersIndexRoute = PlayersIndexImport.update({
  id: '/players/',
  path: '/players/',
  getParentRoute: () => rootRoute,
} as any)

const KeyIndexRoute = KeyIndexImport.update({
  id: '/key/',
  path: '/key/',
  getParentRoute: () => rootRoute,
} as any)

const ErrorIndexRoute = ErrorIndexImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => rootRoute,
} as any)

const TeamsTeamIdRoute = TeamsTeamIdImport.update({
  id: '/teams/$teamId',
  path: '/teams/$teamId',
  getParentRoute: () => rootRoute,
} as any)

const PlayersPlayerIdRoute = PlayersPlayerIdImport.update({
  id: '/players/$playerId',
  path: '/players/$playerId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/players/$playerId': {
      id: '/players/$playerId'
      path: '/players/$playerId'
      fullPath: '/players/$playerId'
      preLoaderRoute: typeof PlayersPlayerIdImport
      parentRoute: typeof rootRoute
    }
    '/teams/$teamId': {
      id: '/teams/$teamId'
      path: '/teams/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof TeamsTeamIdImport
      parentRoute: typeof rootRoute
    }
    '/error/': {
      id: '/error/'
      path: '/error'
      fullPath: '/error'
      preLoaderRoute: typeof ErrorIndexImport
      parentRoute: typeof rootRoute
    }
    '/key/': {
      id: '/key/'
      path: '/key'
      fullPath: '/key'
      preLoaderRoute: typeof KeyIndexImport
      parentRoute: typeof rootRoute
    }
    '/players/': {
      id: '/players/'
      path: '/players'
      fullPath: '/players'
      preLoaderRoute: typeof PlayersIndexImport
      parentRoute: typeof rootRoute
    }
    '/rankings/': {
      id: '/rankings/'
      path: '/rankings'
      fullPath: '/rankings'
      preLoaderRoute: typeof RankingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/teams/': {
      id: '/teams/'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/players/$playerId': typeof PlayersPlayerIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/error': typeof ErrorIndexRoute
  '/key': typeof KeyIndexRoute
  '/players': typeof PlayersIndexRoute
  '/rankings': typeof RankingsIndexRoute
  '/teams': typeof TeamsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/players/$playerId': typeof PlayersPlayerIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/error': typeof ErrorIndexRoute
  '/key': typeof KeyIndexRoute
  '/players': typeof PlayersIndexRoute
  '/rankings': typeof RankingsIndexRoute
  '/teams': typeof TeamsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/players/$playerId': typeof PlayersPlayerIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/error/': typeof ErrorIndexRoute
  '/key/': typeof KeyIndexRoute
  '/players/': typeof PlayersIndexRoute
  '/rankings/': typeof RankingsIndexRoute
  '/teams/': typeof TeamsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/players/$playerId'
    | '/teams/$teamId'
    | '/error'
    | '/key'
    | '/players'
    | '/rankings'
    | '/teams'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/players/$playerId'
    | '/teams/$teamId'
    | '/error'
    | '/key'
    | '/players'
    | '/rankings'
    | '/teams'
  id:
    | '__root__'
    | '/'
    | '/players/$playerId'
    | '/teams/$teamId'
    | '/error/'
    | '/key/'
    | '/players/'
    | '/rankings/'
    | '/teams/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayersPlayerIdRoute: typeof PlayersPlayerIdRoute
  TeamsTeamIdRoute: typeof TeamsTeamIdRoute
  ErrorIndexRoute: typeof ErrorIndexRoute
  KeyIndexRoute: typeof KeyIndexRoute
  PlayersIndexRoute: typeof PlayersIndexRoute
  RankingsIndexRoute: typeof RankingsIndexRoute
  TeamsIndexRoute: typeof TeamsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayersPlayerIdRoute: PlayersPlayerIdRoute,
  TeamsTeamIdRoute: TeamsTeamIdRoute,
  ErrorIndexRoute: ErrorIndexRoute,
  KeyIndexRoute: KeyIndexRoute,
  PlayersIndexRoute: PlayersIndexRoute,
  RankingsIndexRoute: RankingsIndexRoute,
  TeamsIndexRoute: TeamsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/players/$playerId",
        "/teams/$teamId",
        "/error/",
        "/key/",
        "/players/",
        "/rankings/",
        "/teams/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/players/$playerId": {
      "filePath": "players/$playerId.tsx"
    },
    "/teams/$teamId": {
      "filePath": "teams/$teamId.tsx"
    },
    "/error/": {
      "filePath": "error/index.tsx"
    },
    "/key/": {
      "filePath": "key/index.tsx"
    },
    "/players/": {
      "filePath": "players/index.tsx"
    },
    "/rankings/": {
      "filePath": "rankings/index.tsx"
    },
    "/teams/": {
      "filePath": "teams/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
